
from auth import login, register
from user import show_menu_by_role
from slot import get_slot_by_id, get_available_slots, configure_parking_lot
from report import total_revenue, occupancy_rate, most_used_slots
from data_handler import load_json, save_json 
from addanddelete import add_slot_action, delete_slot_action 
from check_in_out import check_in_vehicle_action, check_out_vehicle_action
import transaction

# <<< PH·∫¶N C·∫¨P NH·∫¨T N·∫∞M ·ªû H√ÄM N√ÄY >>>
def configure_lot_action():
    """H·ªèi x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a d·ªØ li·ªáu c≈© v√† c·∫•u h√¨nh l·∫°i b√£i xe."""
    print("\n‚ö†Ô∏è C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y s·∫Ω X√ìA S·∫†CH to√†n b·ªô d·ªØ li·ªáu giao d·ªãch (transactions) v√† xe c·ªô (vehicles).")
    print("D·ªØ li·ªáu ng∆∞·ªùi d√πng (users) s·∫Ω kh√¥ng b·ªã ·∫£nh h∆∞·ªüng.")
    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c kh√¥ng? (y/n): ").lower().strip()
    
    if confirm != 'y':
        print("‚ÑπÔ∏è Thao t√°c ƒë√£ ƒë∆∞·ª£c h·ªßy.")
        return

    print("‚ÑπÔ∏è ƒêang x√≥a d·ªØ li·ªáu c≈©...")
    save_json("data/transactions.json", [])
    save_json("data/vehicles.json", [])
    print("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu giao d·ªãch v√† xe c·ªô th√†nh c√¥ng.")
    
    try:
        total = int(input("Nh·∫≠p t·ªïng s·ªë ch·ªó ƒë·ªó m·ªõi: "))
        configure_parking_lot(total)
    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n.")
# <<< K·∫æT TH√öC PH·∫¶N C·∫¨P NH·∫¨T >>>


def view_available_slots_action():
    available = get_available_slots()
    if not available:
        print("‚ÑπÔ∏è Hi·ªán t·∫°i kh√¥ng c√≤n ch·ªó ƒë·ªó n√†o tr·ªëng.")
    else:
        print(f"--- C√°c ch·ªó ƒë·ªó c√≤n tr·ªëng ({len(available)}) ---")
        slot_ids = [s['slot_id'] for s in available]
        print(", ".join(slot_ids))

def view_reports():
    transactions = load_json("data/transactions.json")
    if not isinstance(transactions, list) or not transactions:
        print("‚ÑπÔ∏è Ch∆∞a c√≥ d·ªØ li·ªáu giao d·ªãch ƒë·ªÉ t·∫°o b√°o c√°o.")
        return
        
    print("\n--- B√ÅO C√ÅO ---")
    print("Doanh thu h√¥m nay:", total_revenue(transactions, "daily"), "VND")
    print("Doanh thu tu·∫ßn n√†y:", total_revenue(transactions, "weekly"), "VND")
    print("Doanh thu th√°ng n√†y:", total_revenue(transactions, "monthly"), "VND")
    
    # Gi·∫£ s·ª≠ b√£i xe c√≥ 50 ch·ªó n·∫øu ch∆∞a c·∫•u h√¨nh
    total_slots = len(load_json("data/slots.json") or []) or 50 
    print("T·ª∑ l·ªá s·ª≠ d·ª•ng ch·ªó ƒë·ªó:", occupancy_rate(transactions, total_slots), "%")
    print("C√°c v·ªã tr√≠ ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t:", most_used_slots(transactions))
    print("------------")

def handle_action(user, choice):
    role = user.get_role()
    if role == "admin":
        if choice == "1":
            configure_lot_action()
        elif choice == "2":
            view_reports()
        elif choice == "3":          
            add_slot_action()
        elif choice == "4":          
            delete_slot_action()
    elif role == "attendant":
        if choice == "1":
            view_available_slots_action()
        elif choice == "2":
            check_in_vehicle_action()
        elif choice == "3":
            check_out_vehicle_action()
    elif role == "owner":
        if choice == "1":
            view_available_slots_action()
        elif choice == "2":
            check_in_vehicle_action()
        elif choice == "3":
            print("check estimated parking fee")
        elif choice == "4":
            slot_id_input = input("Nh·∫≠p ID ch·ªó ƒë·ªó c·∫ßn t√¨m: ").strip().upper()
            if slot_id_input:
                slot_info = get_slot_by_id(slot_id_input)
                if slot_info:
                    print(f"--> Th√¥ng tin: {slot_info}")
                else:
                    print(f"--> Kh√¥ng t√¨m th·∫•y ch·ªó ƒë·ªó {slot_id_input}")
            else:
                print("ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")


def main():
    while True:
        print("\n1. Login\n2. Register\n0. Exit")
        opt = input("Choose: ")
        if opt == "1":
            user = login()
            if user:
                while True:
                    print("-" * 20)
                    show_menu_by_role(user)
                    choice = input("Your choice: ")
                    if choice == "0":
                        break
                    handle_action(user, choice)
        elif opt == "2":
            register()
        elif opt == "0":
            print("üëã T·∫°m bi·ªát!")
            break

if __name__ == "__main__":
    main()
=======
from auth import login, register
from user import show_menu_by_role
from slot import get_slot_by_id, get_available_slots, configure_parking_lot
from report import total_revenue, occupancy_rate, most_used_slots
from data_handler import load_json
from addanddelete import add_slot_action, delete_slot_action 
from check_in_out import check_in_vehicle_action, check_out_vehicle_action
from search_vehicles import search_vehicle
from transaction import get_slot_by_id
from fee import config_pricing_setting, display_pricing_info

def configure_lot_action():
    try:
        total = int(input("Nh·∫≠p t·ªïng s·ªë ch·ªó ƒë·ªó: "))
        configure_parking_lot(total)
    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n.")

def view_available_slots_action():
    available = get_available_slots()
    if not available:
        print("‚ÑπÔ∏è Hi·ªán t·∫°i kh√¥ng c√≤n ch·ªó ƒë·ªó n√†o tr·ªëng.")
    else:
        print(f"--- C√°c ch·ªó ƒë·ªó c√≤n tr·ªëng ({len(available)}) ---")
        slot_ids = [s['slot_id'] for s in available]
        print(", ".join(slot_ids))

def view_reports():
    transactions = load_json("data/transactions.json")
    if not isinstance(transactions, list) or not transactions:
        print("‚ÑπÔ∏è Ch∆∞a c√≥ d·ªØ li·ªáu giao d·ªãch ƒë·ªÉ t·∫°o b√°o c√°o.")
        return

    print("\n--- B√ÅO C√ÅO ---")
    print("Doanh thu h√¥m nay:", total_revenue(transactions, "daily"), "VND")
    print("Doanh thu tu·∫ßn n√†y:", total_revenue(transactions, "weekly"), "VND")
    print("Doanh thu th√°ng n√†y:", total_revenue(transactions, "monthly"), "VND")
    
    # Gi·∫£ s·ª≠ b√£i xe c√≥ 50 ch·ªó n·∫øu ch∆∞a c·∫•u h√¨nh
    total_slots = len(load_json("data/slots.json") or []) or 50 
    print("T·ª∑ l·ªá s·ª≠ d·ª•ng ch·ªó ƒë·ªó:", occupancy_rate(transactions, total_slots), "%")
    print("C√°c v·ªã tr√≠ ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t:", most_used_slots(transactions))
    print("------------")

def search_currently_vechicles():
    license_plate = input("Enter your license plate: ")
    search_vehicle(license_plate)


def handle_action(user, choice):
    role = user.get_role()
    if role == "admin":
        if choice == "1":
            configure_lot_action()
        elif choice == "2":
            view_reports()
        elif choice == "3":          
            add_slot_action()
        elif choice == "4":          
            delete_slot_action()
        elif choice == "5":          
            display_pricing_info()
        elif choice == "6":          
            config_pricing_setting()
    elif role == "attendant":
        if choice == "1":
            view_available_slots_action()
        elif choice == "2":
            search_currently_vechicles()
        elif choice == "3":
            check_in_vehicle_action()
        elif choice == "4":
            check_out_vehicle_action()
        elif choice == "5":          
            display_pricing_info()
    elif role == "owner":
        if choice == "1":
            view_available_slots_action()
        elif choice == "2":
            check_in_vehicle_action()
        elif choice == "3":
            print("check estimated parking fee")
        elif choice == "4":
            get_slot_by_id("data/slots.json")
        elif choice == "5":          
            display_pricing_info()
        elif choice == "6":          
            config_pricing_setting()

def main():
    while True:
        print("\n1. Login\n2. Register\n0. Exit")
        opt = input("Choose: ")
        if opt == "1":
            user = login()
            if user:
                while True:
                    print("-" * 20)
                    show_menu_by_role(user)
                    choice = input("Your choice: ")
                    if choice == "0":
                        break
                    handle_action(user, choice)
        elif opt == "2":
            register()
        elif opt == "0":
            print("üëã T·∫°m bi·ªát!")
            break

if __name__ == "__main__":
    main()

